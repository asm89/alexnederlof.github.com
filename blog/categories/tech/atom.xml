<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | LexTech]]></title>
  <link href="http://alexnederlof.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://alexnederlof.github.io/"/>
  <updated>2013-06-27T10:07:27+02:00</updated>
  <id>http://alexnederlof.github.io/</id>
  <author>
    <name><![CDATA[Alex Nederlof]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clean test classes using JUnit's rules]]></title>
    <link href="http://alexnederlof.github.io/blog/2012/12/19/clean-test-classes-using-junits-classrules/"/>
    <updated>2012-12-19T21:23:00+01:00</updated>
    <id>http://alexnederlof.github.io/blog/2012/12/19/clean-test-classes-using-junits-classrules</id>
    <content type="html"><![CDATA[<p>A couple of days ago I discovered the beauty of JUnit&rsquo;s <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/TestRule.html">TestRules</a> while searching for an easy way to set a time-out on all tests in a testcase. JUnit has a built-in rule for this called <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Timeout.html"><code>Timeout</code></a>. You can set this rule for every test in your class by setting the timeout in a field like this:</p>

<p>```java Setting a Timeout Rule <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Timeout.html">http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Timeout.html</a> View the Javadoc</p>

<p>public class MyTest {</p>

<pre><code>@Rule
public MethodRule globalTimeout= new Timeout(20);

@Test
public void someTest() {
    ...
}
</code></pre>

<p><code>``
Another gem is the</code>ExpectedException` rule, which allows you to inspect a thrown exception in several ways.</p>

<p>```java Inspecting excptions <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/ExpectedException.html">http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/ExpectedException.html</a> View the Javadoc
public static class HasExpectedException {</p>

<pre><code>@Rule
public ExpectedException thrown= ExpectedException.none();

@Test
public void throwsNothing() {
// no exception expected, none thrown: passes.
}

@Test
public void throwsNullPointerException() {
    thrown.expect(NullPointerException.class);
    throw new NullPointerException();
}

@Test
public void throwsNullPointerExceptionWithMessage() {
    thrown.expect(NullPointerException.class);
    thrown.expectMessage("happened?");
    thrown.expectMessage(startsWith("What"));
    throw new NullPointerException("What happened?");
}
</code></pre>

<p> }
```</p>

<p>The great thing is, it&rsquo;s super easy to extend one of these rules.</p>

<!--more-->


<p>In <a href="https://github.com/crawljax/crawljax">Crawljax</a>, another project I&rsquo;m currently working on, I wanted a Jetty server to start before I the tests run, and to shut it down afterwards. I could do this using a <code>@BeforeClass</code> method and then clean it up in the <code>@AfterClass</code> method but that doesn&rsquo;t make it reusable in other classes. To make it reusable I could put it in an abstract class that just has the setup and teardown methods and inherit that class in the classes where I need the server. However, that can lead to weird class hierarchies that don&rsquo;t make any sense. Again, JUnit&rsquo;s rules come to the rescue. There&rsquo;s the <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/ExternalResource.html"><code>ExternalResource</code></a> that allows you to setup resources before tests, and tear them down afterwards. I inherited this class to provide my Jetty server.</p>

<p>```java Rule to start a Jetty Server <a href="https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/demo/RunWithWebServer.java">https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/demo/RunWithWebServer.java</a> View on GitHub
public class RunWithWebServer extends ExternalResource {</p>

<pre><code>private final Resource resource;

private int port;
private URL demoSite;
private Server server;
private boolean started;

/**
 * @param classPathResource
 *            The name of the resource. This resource must be on the test or regular classpath.
 */
public RunWithWebServer(String classPathResource) {
    resource = Resource.newClassPathResource(classPathResource);
}

@Override
protected void before() throws Throwable {
    server = new Server(0);
    ResourceHandler handler = new ResourceHandler();
    handler.setBaseResource(resource);
    server.setHandler(handler);
    server.start();
    this.port = server.getConnectors()[0].getLocalPort();
    this.demoSite = new URL("http", "localhost", port, "/");
    this.started = true;
}

@Override
protected void after() {
    try {
        if (server != null) {
            server.stop();
        }
    } catch (Exception e) {
        throw new RuntimeException("Could not stop the server", e);
    }
}

// Some getters for the fields
</code></pre>

<p>}
```</p>

<p>The class starts the Jetty server using the given resource as the web folder. Tests can then use this rule to obtain a real URL to test with:</p>

<p>```java Using the webserver. <a href="https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/core/CandidateElementExtractorTest.java">https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/core/CandidateElementExtractorTest.java</a> Usage example
public void SomeWebTest {</p>

<pre><code>@ClassRule
public static final RunWithWebServer SERVER = new RunWithWebServer("/site/crawler");

@Test
public void test() {
    URL url = SERVER.getSiteUrl();
    testStuffUsingThe(url); 
}
</code></pre>

<p>}
```</p>

<p>There are more built-in rules in JUnit like:</p>

<ul>
<li>The <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/TemporaryFolder.html">TemporaryFolder</a> That creates a temporary folder for you,</li>
<li>the <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Verifier.html">Verifier</a> that can verify some invariant after each test method,</li>
<li>and more! Checkout the <a href="https://github.com/KentBeck/junit/wiki/Rules">JUnit wiki</a> to learn more of them.</li>
</ul>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration testing with Jetty]]></title>
    <link href="http://alexnederlof.github.io/blog/2012/11/21/integration-testing-with-jetty/"/>
    <updated>2012-11-21T16:23:00+01:00</updated>
    <id>http://alexnederlof.github.io/blog/2012/11/21/integration-testing-with-jetty</id>
    <content type="html"><![CDATA[<p>This is a followup after <a href="/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests/">my previous post about separating JUnit tests into fast tests and integration tests</a>. The sample code is <a href="https://github.com/alexnederlof/integration-testing-example">available on GitHub</a>.</p>

<p>When building a web application I like to have an integration test suite that resembles the real life situation as best as possible. The code should be able to run without too much effort from a build server like <a href="http://jenkins-ci.org/">Jenkins</a> and it should be fairly easy to maintain. In this post I will explain how I achieved these goals.</p>

<p>To see what this example app does run the server by running the main method in <code>com.alexnederlof.inttesting.MyWebServer.java</code> and brows to <a href="">http://localhost:9090</a>. You can do this from your favorite IDE.</p>

<!--more-->


<h3>Installing Selenium server</h3>

<p>Before we get started we need to install Selenium as a service on the build server. <a href="/blog/2012/11/19/installing-selenium-with-jenkins-on-ubuntu/">In a previous post I wrote</a> how to install Selenium on a headless Ubuntu server. To install Selenium for this example, follow that post until the part where you hook it onto Jenkins. We don’t need that here because we will use JUnit instead of the HTML scripts I used in that post. To start and stop Selenium we need a script to wrap the jar. You can find my version of this script <a href="https://gist.github.com/4120566">here</a>. Adopt the script to your settings and install it in <code>/etc/init.d/selenium</code>. Make sure the display port matches the one you defined in <code>/etc/init.d/xvfb</code>. Now start Selenium and check the log to see if it went without any errors.</p>

<h3>Creating the tests</h3>

<p>I created the tests for this example using the Firefox Selenium IDE. I exported them to Java and imported them in my project. They test two very simple pages included in the sample project that refer to each other. Here’s what the test looks like:</p>

<p>```java A simple web test <a href="https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/SimpleSeleniumTest.java">https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/SimpleSeleniumTest.java</a> View on Github</p>

<pre><code>@Test
public void testTheWebApp() throws Exception {
    Selenium selenium = getSelenium();
    selenium.open("/");
    assertThat(selenium.getText("css=h1"), is("This is the main page"));
    assertThat(selenium.getTitle(), is("Welcome"));
    selenium.click("id=otherLink");
    selenium.waitForPageToLoad("30000");
    assertThat(selenium.getTitle(), is("Other page"));
    assertThat(selenium.getText("css=h1"), is("This is the other page"));
    selenium.click("id=main");
    selenium.waitForPageToLoad("30000");
    assertThat(selenium.getTitle(), is("Welcome"));
}
</code></pre>

<p>```</p>

<p>I want my tests to run on multiple browsers. To do this I use one of JUnit’s latest cool features: <a href="http://junit.sourceforge.net/javadoc/org/junit/runners/Parameterized.html">@Parameterized</a>. In the superclass of all my Selenium tests (<code>MultiBrowserTest.java</code>) the @Parameterized passes the browser as an argument to the constructor. Selenium is then started using that browser. The name parameter gives a nice name to the individual tests instances. Here’s what the test’s superclass looks like:</p>

<p>```java MultiBrowserTest <a href="https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/MultiBrowserTest.java">https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/MultiBrowserTest.java</a> View it on GitHub
public abstract class MultiBrowserTest implements SlowTest {</p>

<pre><code>private static final String BASE_URL = MyWebServer.BASE_URL;
private static final String SELENIUM_HOST = "127.0.0.1";
private static final int SELENIUM_PORT = 4443;

@Parameters(name = "browser={0}")
public static List&lt;Object[]&gt; data() {
    return Arrays.asList(new Object[][] { { "*firefox" },
            { "*googlechrome" } });
}

private final String browser;

private Selenium selenium;

public MultiBrowserTest(String browser) {
    this.browser = browser;
}

@Before
public void setUp() throws Exception {
    selenium = new DefaultSelenium(SELENIUM_HOST, SELENIUM_PORT,
            getBrowser(), BASE_URL);
    selenium.start();
}

public String getBrowser() {
    return browser;
}

public Selenium getSelenium() {
    return selenium;
}

@After
public void tearDown() throws Exception {
    selenium.stop();
}
</code></pre>

<p>}
```</p>

<p>Now we need to setup the server to serve the pages Selenium will test. As shown in <a href="/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests/">the previous post</a>, I have a test suite that starts and stops  <code>MyServer.java</code>. This class wraps Jetty with the most basic configuration. It looks like this:</p>

<p>```java Simple Jetty Wrapper</p>

<pre><code>public static WebAppContext buildWebAppContext() {
    WebAppContext webAppContext = new WebAppContext();
    webAppContext.setWar(new File("src/main/webapp/").getAbsolutePath());
    return webAppContext;
}

private final Server server;

public MyWebServer() {
    this.server = new Server(PORT);
    server.setHandler(buildWebAppContext());
}

public void start() throws Exception {
    server.start();
}

public void stop() throws Exception {
    server.stop();
}
</code></pre>

<p>```</p>

<p>All in all this is what happens when you run <code>mvn test -P integrationtests</code>:</p>

<ul>
<li>The IntegrationTestSuit.java is run. This loads the Jetty server before it continues with the tests.</li>
<li>SimpleSelenium test is loaded twice, once for Chrome and once for FireFox.</li>
<li>The tests connect to the Selenium server running on localhost.</li>
<li>After the tests have ran, either successful or not, the Suite shuts down the Jetty server.</li>
<li>If you run this procedure from a continues integration server like Jenkins, you get nice statistics on tests. Hurray you have automated your integration tests!</li>
</ul>


<p>Even cooler is that if you have a pretty decent Selenium test suite, you can also check your code coverage to see how much code you reach with your integration tests.</p>

<h3>Whats next?</h3>

<p>I want to find out how Selenium Grid works and set it up on a Windows VM so I can also test Safari and Internet Explorer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Separating the fast from the slow JUnit tests]]></title>
    <link href="http://alexnederlof.github.io/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests/"/>
    <updated>2012-11-21T16:16:00+01:00</updated>
    <id>http://alexnederlof.github.io/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests</id>
    <content type="html"><![CDATA[<p>For some time now I was looking for a good way to do real integration testing with JUnit. These tests tests tend to be slow because the whole stack has to be build up and shut down. Furthermore, some tests also need a specific environment like a database connection which is not available to any developer. That’s why you probably want to split up your test suite in fast and slow (or dependent) tests. JUnit has a technique to split up these tests using <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/experimental/categories/Categories.html">Categories</a>. This allows you to specify the category your tests belongs to and then skip those tests in your Suite like so:</p>

<p>```java</p>

<pre><code>@RunWith(Categories.class)
@IncludeCategory(SlowTests.class)
@SuiteClasses( { A.class, B.class })
public static class SlowTestSuite { }
</code></pre>

<p>```</p>

<p>The downside here is that you have to specify all the tests in the test suite. As far as I know, JUnit has no mechanism to do this for this for you. You can work with the <a href="http://maven.apache.org/plugins/maven-surefire-plugin/examples/junit.html#Using_JUnit_Categories">Maven Surefire plugin</a> to filter stuff in and out, but I think there’s a better way. A man by the name of <a href="http://www.johanneslink.net/">Johannes Link</a> built a <a href="http://www.johanneslink.net/projects/cpsuite.jsp">great little library</a> which does just what I want. I allows us to specify in a Suite to run all JUnit tests it can find. It can also exclude and include certain tests. Unfortunately  it doesn’t work with JUnit’s Categories system but it uses type inheritance. This makes it easy to filter out types of tests. For example I define all the fast tests like this:</p>

<p><code>java
@RunWith(ClasspathSuite.class) // Loads all unit tests it finds on the classpath
@ExcludeBaseTypeFilter(SlowTest.class) // Excludes tests that inherit SlowTest
public class FastTests {}
</code></p>

<!--more-->


<p>This will run every test that doesn’t implement the SlowTest inferface. The slow test suite needs a tearing up of the server, and once the suite is done the server should be shut down. It could also be that you need to set up a database connection or connect to another server. In my case, the suite should only run subtypes of MultiBrowserTest. Here’s how that looks:</p>

<p>```java
@RunWith(ClasspathSuite.class)
@BaseTypeFilter(MultiBrowserTest.class)
public class IntegrationTestSuite {</p>

<pre><code>private static MyWebServer server;

@BeforeClass
public static void startServer() throws Exception {
    server = new MyWebServer();
    server.start();
}

@AfterClass
public static void shutDownServer() throws Exception {
    server.stop();
}
</code></pre>

<p>}
```</p>

<p>Now that we’ve split up the tests we want Maven to run the fast tests always and do the integration tests only when we ask for it. This can easily be done using Maven profiles. I define two profiles default and integrationtests. They set the include property for the surefire plugin.</p>

<p>``` xml
<profiles></p>

<pre><code>    &lt;profile&gt;
        &lt;id&gt;default&lt;/id&gt;
        &lt;activation&gt;
            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
        &lt;/activation&gt;
        &lt;properties&gt;
            &lt;tests.include&gt;com/alexnederlof/seleniumtest/suites/FastTests.java&lt;/tests.include&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
        &lt;id&gt;integrationtests&lt;/id&gt;
        &lt;properties&gt;
            &lt;tests.include&gt;com/alexnederlof/seleniumtest/suites/*&lt;/tests.include&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;version&gt;2.12.4&lt;/version&gt;
            &lt;configuration&gt;
                &lt;includes&gt;
                    &lt;include&gt;${tests.include}&lt;/include&gt;
                &lt;/includes&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>```</p>

<p>Now running <code>mvn test</code> will run only the FastTests and <code>mvn test -P integrationtests</code> will run all the tests.</p>

<p>You can find the code for this example <a href="https://github.com/alexnederlof/integration-testing-example/">on GitHub</a>. This post is actually part of <a href="/blog/2012/11/21/integration-testing-with-jetty/">another blog post of mine</a> where I explain how to do integration testing using Jetty and Selenium.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Selenium with Jenkins on Ubuntu]]></title>
    <link href="http://alexnederlof.github.io/blog/2012/11/19/installing-selenium-with-jenkins-on-ubuntu/"/>
    <updated>2012-11-19T16:01:00+01:00</updated>
    <id>http://alexnederlof.github.io/blog/2012/11/19/installing-selenium-with-jenkins-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Last week I fell in love with <a href="http://seleniumhq.org/">Selenium</a> and started to create some tests using the <a href="http://seleniumhq.org/projects/ide/">Firefox Selenium IDE</a>. If you’ve never done this I highly recommend trying it out. It’s really easy and great fun.</p>

<p>Now that I’ve created some great test suites I wanted to hook the tests to my Jenkins build server. There was no tutorial that covered everything online so here’s what I did:</p>

<p><strong>This will install Jenkins, Selenium standalone, Chrome and FireFox on a headless Ubuntu server.</strong></p>

<!--more-->


<p>I’m running Ubuntu 12.04. I assume you have Jenkins installed. If not, the Jenkins installation documentation is an excellent resource.</p>

<p>To download Chrome we need to add the Google key to for apt:</p>

<pre><code>wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
sudo sh -c 'echo deb http://dl.google.com/linux/chrome/deb/ stable main &gt; /etc/apt/sources.list.d/google.list'
</code></pre>

<p>Let’s install the required packages. The fonts aren’t really necessary but installing them prevents you from getting annoying warnings. <a href="http://en.wikipedia.org/wiki/Xvfb">xvfb</a> can start a virtual X window on a server where Selenium can start the browser in to run your tests.</p>

<pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic xvfb x11-apps  imagemagick firefox google-chrome-stable
</code></pre>

<p>Now we need to download the <a href="https://www.google.com/search?q=selenium+chrome+driver">Chrome driver</a> binary for Ubuntu and we need the latest <a href="http://seleniumhq.org/download/">Selenium Server jar</a>. I placed the Chrome driver in <code>/var/lib/chrome-driver/chrome-driver</code> and the selenium jar in <code>/var/lib/selenium/selenium.jar</code> but you can put them anywhere you like.</p>

<p>To start xvfb I like to have a little start/stop script like this one:</p>

<p>```bash</p>

<pre><code>#!/bin/bash
if [ -z "$1" ]; then
    echo "`basename $0` {start|stop}"
    exit
fi

case "$1" in
start)
    /usr/bin/Xvfb :99 -ac -screen 0 1024x768x8 &amp;
;;
stop)
    killall Xvfb
;;
esac
</code></pre>

<p>```</p>

<p>This will start a Window on display :99. This is important later on. Place the script in <code>/etc/init.d/</code>. To start it automatically on boot, run:  <code>sudo update-rc.d xvfb defaults</code>.</p>

<p>Now it’s time to test if Selenium works. I presume you hava a Selenium HTML Suite plus a site you can test with.</p>

<p>```bash</p>

<pre><code># First lets start xvfb
sudo /etc/init.d/xvfb start

# Now we have to set the DISPLAY env variable so Firefox and Chrome know where to open the browser.
export DISPLAY=:99

# Let's see if Selenium works for firefox:
java -jar /var/lib/selenium/selenium-server.jar -htmlSuite *firefox http://yoursite.com "/path/to/your/tests/Suite.html" "/tmp/firefox-results.html"

# For chrome we also need to specify the Chrome driver location.:
java -jar -Dwebdriver.chrome.driver=/var/lib/chrome-driver/chromedriver /var/lib/selenium/selenium-server.jar -htmlSuite *googlechrome http://yoursite.com "/path/to/your/tests/Suite.html" "/tmp/chrome-results.html"
</code></pre>

<p>```</p>

<p>These commands should now work without any errors and show you the results in the specified files in <code>/tmp/</code>.</p>

<h2>Now let’s hook it onto Jenkins!</h2>

<p>Make sure you have <a href="http://wiki.hudson-ci.org/display/HUDSON/Seleniumhq+Plugin">the SeleniumHQ plugin</a> installed for Jenkins.</p>

<p>In Jenkins global configuration add the environment variable that specifies the display:</p>

<p>{% img /images/installing-selenium-with-jenkins-on-ubuntu/env.png %}</p>

<p>Then select <em>“New Job”</em> and then select <em>“Build a free-style software project”</em> and give it a name.</p>

<p>Fill in your SCM provider, assuming you have one so the workspace can be filled. I have my tests stored in a folder named tests in the repo.</p>

<p>In the <em>“Build Steps”</em> section, add an entry for the Chrome test and for the Firefox test. Note that in the Chrome test you have to specify the path to your Chrome driver.</p>

<p>Then as a post-build action add the selenium reports.</p>

<p>{% img /images/installing-selenium-with-jenkins-on-ubuntu/config.png %}</p>

<p>If everything went well you should see nice test graphs in your Jenkins like this:</p>

<p>{% img /images/installing-selenium-with-jenkins-on-ubuntu/test-result.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A 10x faster Jasper maven plugin]]></title>
    <link href="http://alexnederlof.github.io/blog/2011/09/11/a-10x-faster-jasper-maven-plugin/"/>
    <updated>2011-09-11T15:57:00+02:00</updated>
    <id>http://alexnederlof.github.io/blog/2011/09/11/a-10x-faster-jasper-maven-plugin</id>
    <content type="html"><![CDATA[<p>For some months now I had to work with Java projects that use <a href="http://jasperforge.org/projects/jasperreports">Jasper</a> to generate PDF files. These reports have to be compiled from a kind xml-like document to a compiled ‘.jasper’ file. The <a href="http://mojo.codehaus.org/jasperreports-maven-plugin/">Jasperreports-maven-plug-in</a> does this for me whenever I make a release of the software or when I’m working on the reports. However, the plug-in takes considerable time to compile these reports. Compiling 52 reports takes about 49 seconds. That’s a bit too long for me if I have to make several builds. Since I wanted to learn how to make my own Maven plug-ins anyway I decided to try to make a faster plug-in on my own.</p>

<p>The original plug-in is created in Java 4, works single-threaded and the last time any committed to the repo was (at time of writing) 31st of August, 2009. Not really an active project it seems. For that reason I decided to just create a new project on Github.</p>

<p>I created the plug-in using Java 6, presuming most people will have Java 6 installed by now. Because the compiler has to read and write to a disk, doing so concurrently should make it faster. Finally, the code looks a better because the collections now have generics.</p>

<p>It turned out my plug-in was indeed a lot faster. While the original plug-in takes 48 seconds to compile 52 files, my plug-in only takes 4.7 seconds. Almost ten times faster!</p>

<p>Since it is my first Maven project there’s probably more work to be done. However it seems to work fine on Maven 2 and 3 on my Mac using Java 6.</p>

<p>You can try it yourself and download the source from <a href="https://github.com/alexnederlof/Jasper-report-maven-plugin">the Github repo</a> I created. Issues can be filed there as well.</p>
]]></content>
  </entry>
  
</feed>
