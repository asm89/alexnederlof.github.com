<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | LexTech]]></title>
  <link href="http://alex.nederlof.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://alex.nederlof.com/"/>
  <updated>2013-11-24T09:43:51+08:00</updated>
  <id>http://alex.nederlof.com/</id>
  <author>
    <name><![CDATA[Alex Nederlof]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cache-Control using annotations with Jersey]]></title>
    <link href="http://alex.nederlof.com/blog/2013/07/28/caching-using-annotations-with-jersey/"/>
    <updated>2013-07-28T12:02:00+08:00</updated>
    <id>http://alex.nederlof.com/blog/2013/07/28/caching-using-annotations-with-jersey</id>
    <content type="html"><![CDATA[<p>Building RESTful services with Jax-RX is awesome, but there&rsquo;s no annotation based notation to set your <code>Cache-Control</code> headers. You can either set the Cache-Control headers using a filter based on a URL pattern and map your responses through there, or you can use the <a href="http://jersey.java.net/nonav/apidocs/1.12/jersey/javax/ws/rs/core/Response.ResponseBuilder.html">ResponseBuiler</a> with the <a href="http://jersey.java.net/nonav/apidocs/1.12/jersey/javax/ws/rs/core/CacheControl.html">CacheControl</a> class like this:</p>

<p><code>java
CacheControl control = new CacheControl();
control.setMaxAge(60);
Response.ok(myEntity).cacheControl(control).build();
</code></p>

<p>However, I would rather have something like this:</p>

<p>```java
@GET
@CacheMaxAge(time = 10, unit = TimeUnit.MINUTES)
@Path(&ldquo;/awesome&rdquo;)
public String returnSomethingAwesome() {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>It turns out that&rsquo;s pretty easy to set-up. I mostly use either no caching at all or caching for a certain period.</p>

<!--more-->


<p>First lets define those two annotations:</p>

<p><div><script src='https://gist.github.com/6098121.js?file=CacheAnnotations.java'></script>
<noscript><pre><code>import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.concurrent.TimeUnit;

public final class CacheAnnotations {

	/**
	 * Set the &quot;Max-age&quot; Cache header.
	 * 
	 * @see &lt;a href=&#39;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.3&#39;&gt;W3C Header
	 *      Field Definitions&lt;/a&gt;
	 */
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.METHOD)
	public @interface CacheMaxAge {
		/**
		 * @return The amount of time to cache this resource.
		 */
		long time();

		/**
		 * @return The {@link TimeUnit} for the given {@link #time()}.
		 */
		TimeUnit unit();
	}

	/**
	 * Sets the cache header to the value &quot;no cache&quot;
	 * 
	 * @see &lt;a href=&#39;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1&#39;&gt;W3c Header
	 *      Field Definitions&lt;/a&gt;
	 */
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.METHOD)
	public @interface NoCache {

	}

	private CacheAnnotations() {
	}
}</code></pre></noscript></div>
</p>

<p>As you can see I can either set <code>@NoCache</code> or I can set <code>@CacheMaxAge</code> with a certain time.</p>

<p>Now we need to configure these annotations using a &lsquo;ResourceFilterFactory&rsquo;:</p>

<p><div><script src='https://gist.github.com/6098121.js?file=CacheFilterFactory.java'></script>
<noscript><pre><code>import java.util.Collections;
import java.util.List;

import javax.ws.rs.core.HttpHeaders;

import com.alexnederlof.bigcrawl.server.web.CacheAnnotations.CacheMaxAge;
import com.alexnederlof.bigcrawl.server.web.CacheAnnotations.NoCache;
import com.sun.jersey.api.model.AbstractMethod;
import com.sun.jersey.spi.container.ContainerRequest;
import com.sun.jersey.spi.container.ContainerRequestFilter;
import com.sun.jersey.spi.container.ContainerResponse;
import com.sun.jersey.spi.container.ContainerResponseFilter;
import com.sun.jersey.spi.container.ResourceFilter;
import com.sun.jersey.spi.container.ResourceFilterFactory;

public class CacheFilterFactory implements ResourceFilterFactory {

	@Override
	public List&lt;ResourceFilter&gt; create(AbstractMethod am) {
		if (am.isAnnotationPresent(CacheMaxAge.class)) {
			CacheMaxAge maxAge = am.getAnnotation(CacheMaxAge.class);
			return newCacheFilter(&quot;max-age: &quot; + maxAge.unit().toSeconds(maxAge.time()));
		} else if (am.isAnnotationPresent(NoCache.class)) {
			return newCacheFilter(&quot;no-cache&quot;);
		} else {
			return Collections.emptyList();
		}
	}

	private List&lt;ResourceFilter&gt; newCacheFilter(String content) {
		return Collections
		        .&lt;ResourceFilter&gt; singletonList(new CacheResponseFilter(content));
	}

	private static class CacheResponseFilter implements ResourceFilter, ContainerResponseFilter {
		private final String headerValue;

		CacheResponseFilter(String headerValue) {
			this.headerValue = headerValue;
		}

		@Override
		public ContainerRequestFilter getRequestFilter() {
			return null;
		}

		@Override
		public ContainerResponseFilter getResponseFilter() {
			return this;
		}

		@Override
		public ContainerResponse filter(ContainerRequest request, ContainerResponse response) {
			response.getHttpHeaders().putSingle(HttpHeaders.CACHE_CONTROL, headerValue);
			return response;
		}
	}
}</code></pre></noscript></div>
</p>

<p>Finally we need to install these filters. Using the <code>web.xml</code> file you&rsquo;ll can add the class like so:</p>

<p>```xml
&lt;init-param></p>

<pre><code>&lt;param-name&gt;com.sun.jersey.spi.container.ResourceFilters&lt;/param-name&gt;
&lt;param-value&gt;package.name.CacheFilterFactory&lt;/param-value&gt;
</code></pre>

<p>&lt;/init-param>
```</p>

<p>&hellip;or if you are using Guice you can add it to the parameters like this:</p>

<p><code>java
Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
params.put(ResourceConfig.PROPERTY_RESOURCE_FILTER_FACTORIES, CacheFilterFactory.class.getName());
filter("/api/*").through(GuiceContainer.class, params);
</code></p>

<p>You can no add these annotations to any resource method you like. As you can see it is easy to extend to add any other headers you like. With a little tweaking you might also be able to configure it so that it can use ETags by intercepting the content but that was outside the scope for me.</p>

<p>This solution was inspired by <a href="http://stackoverflow.com/questions/10934316/jersey-default-cache-control-to-no-cache">this StackOverflow post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX build server]]></title>
    <link href="http://alex.nederlof.com/blog/2013/02/22/latex-build-server/"/>
    <updated>2013-02-22T10:58:00+08:00</updated>
    <id>http://alex.nederlof.com/blog/2013/02/22/latex-build-server</id>
    <content type="html"><![CDATA[<p>I recently had to work with <a href="http://www.LaTeX-project.org/">LaTeX</a> again. Although LaTeX has its perks like a proper equation editor and BibTex I don&rsquo;t like working with it for several reasons:</p>

<ol>
<li>there is no proper <a href="http://en.wikipedia.org/wiki/WYSIWYG">WYSIWYG</a> editor that compiles while you type for OS X and the source files are hard to read by themselves</li>
<li>you have to manually configure that it compiles LaTeX, then bibtex, and then LaTeX twice</li>
<li>the horrors of positioning and loading images with all the different compilers, bounding boxes, etc.</li>
<li>the fact that they have their own <a href="http://tex.stackexchange.com/">Stack exchange Q&amp;A</a> is an indication of how arcane it is.</li>
</ol>


<p>Because the source files are so unpleasant to read, you always have to make sure you send the compiled latest version of your document to the right people. What I like about some MarkDown related projects like <a href="https://github.com/mojombo/jekyll">Jekyll</a> and <a href="octopress.org">Octopress</a> is the way you can push the source to for example GitHub, and they build the site for you. I wanted that for LaTeX as well. Using a simple script I now have my own LaTeX build server. This way my colleagues and I can always see the latest version of the document in any browser so I don&rsquo;t have to think about distributing the latest version to the right people or devices.</p>

<p>The end result is nice and simple listing of the PDF, diff and log in a folder that indicates the build date:</p>

<p><img class="[End result]" src="/images/latex-build.png" title="End result" ></p>

<!--more-->


<h3>Setting it up</h3>

<p>I host my own Git server so I hooked the script as a <code>post-receive</code> script in the Git hooks directory. If you are running elsewhere you could also do it via a WebHook I guess. You need a workspace folder to checkout the project and a web folder to dump the results in. Here is the script:</p>

<p><div><script src='https://gist.github.com/5015614.js'></script>
<noscript><pre><code>#!/bin/sh

WEBDIR=yourwebdir
WORKSPACE=your/workspace
TEX_FILE_NAME=your_file

echo
echo &quot;**** Pulling changes into Live [Hub&#39;s post-update hook]&quot;
echo

# Go to the checked-out version of repo
cd $WORKSPACE || exit
unset GIT_DIR

# Save the current commit id so we can calculate the diff
current=`git rev-parse HEAD`

# Update the latest changes in master
git pull origin master

# Compile the LaTex stuff
pdflatex -interaction=batchmode $TEX_FILE_NAME.tex &gt; /dev/null
bibtex -terse $TEX_FILE_NAME
pdflatex -interaction=batchmode $TEX_FILE_NAME.tex &gt; /dev/null
pdflatex -interaction=batchmode $TEX_FILE_NAME.tex

# Create a folder for the new build
NOW=$(date +&quot;%m-%d-%Y-%H%M&quot;)
OUT_DIR=$WEBDIR/$NOW
mkdir $OUT_DIR 

# Move the results to the output directory
cp $TEX_FILE_NAME.pdf $OUT_DIR/$TEX_FILE_NAME-$NOW-.pdf

# Make a syntax highlighted diff in the output directory
git diff $current..HEAD | pygmentize -l diff -f html -O full &gt; $OUT_DIR/diff.html

# Output the log messages to the output directory
git log $current..HEAD &gt; $OUT_DIR/log.txt

# And we&#39;re all done
exec git update-server-info
</code></pre></noscript></div>
</p>

<p>I use <a href="http://pygments.org/">Pygments</a> to format the diff file and <code>pdflatex</code> to parse the LaTeX. Make sure you have these packages installed on you system.</p>

<p>I&rsquo;m running Apache which gives a nice directory listing. However, it sorts the files in the wrong order. I want the most recent to be on top. Luckily this can be configured in Apache using the <code>IndexOrderDefault Descending Date</code> in your configuration.</p>

<h3>Potential improvements:</h3>

<ul>
<li>I use a static location for the work folder but you could also create a temporary folder and delete it afterwards.</li>
<li>This script only builds the master branch, you could also create a per-branch output folder system.</li>
<li>Adding <a href="http://kernel.org/pub/software/scm/git/docs/git-describe.html">git-discribe</a> to the output would be nice.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean test classes using JUnit's rules]]></title>
    <link href="http://alex.nederlof.com/blog/2012/12/19/clean-test-classes-using-junits-classrules/"/>
    <updated>2012-12-19T21:23:00+08:00</updated>
    <id>http://alex.nederlof.com/blog/2012/12/19/clean-test-classes-using-junits-classrules</id>
    <content type="html"><![CDATA[<p>A couple of days ago I discovered the beauty of JUnit&rsquo;s <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/TestRule.html">TestRules</a> while searching for an easy way to set a time-out on all tests in a testcase. JUnit has a built-in rule for this called <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Timeout.html"><code>Timeout</code></a>. You can set this rule for every test in your class by setting the timeout in a field like this:</p>

<p>```java Setting a Timeout Rule <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Timeout.html">http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Timeout.html</a> View the Javadoc</p>

<p>public class MyTest {</p>

<pre><code>@Rule
public MethodRule globalTimeout= new Timeout(20);

@Test
public void someTest() {
    ...
}
</code></pre>

<p><code>``
Another gem is the</code>ExpectedException` rule, which allows you to inspect a thrown exception in several ways.</p>

<p>```java Inspecting excptions <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/ExpectedException.html">http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/ExpectedException.html</a> View the Javadoc
public static class HasExpectedException {</p>

<pre><code>@Rule
public ExpectedException thrown= ExpectedException.none();

@Test
public void throwsNothing() {
// no exception expected, none thrown: passes.
}

@Test
public void throwsNullPointerException() {
    thrown.expect(NullPointerException.class);
    throw new NullPointerException();
}

@Test
public void throwsNullPointerExceptionWithMessage() {
    thrown.expect(NullPointerException.class);
    thrown.expectMessage("happened?");
    thrown.expectMessage(startsWith("What"));
    throw new NullPointerException("What happened?");
}
</code></pre>

<p> }
```</p>

<p>The great thing is, it&rsquo;s super easy to extend one of these rules.</p>

<!--more-->


<p>In <a href="https://github.com/crawljax/crawljax">Crawljax</a>, another project I&rsquo;m currently working on, I wanted a Jetty server to start before I the tests run, and to shut it down afterwards. I could do this using a <code>@BeforeClass</code> method and then clean it up in the <code>@AfterClass</code> method but that doesn&rsquo;t make it reusable in other classes. To make it reusable I could put it in an abstract class that just has the setup and teardown methods and inherit that class in the classes where I need the server. However, that can lead to weird class hierarchies that don&rsquo;t make any sense. Again, JUnit&rsquo;s rules come to the rescue. There&rsquo;s the <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/ExternalResource.html"><code>ExternalResource</code></a> that allows you to setup resources before tests, and tear them down afterwards. I inherited this class to provide my Jetty server.</p>

<p>```java Rule to start a Jetty Server <a href="https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/demo/RunWithWebServer.java">https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/demo/RunWithWebServer.java</a> View on GitHub
public class RunWithWebServer extends ExternalResource {</p>

<pre><code>private final Resource resource;

private int port;
private URL demoSite;
private Server server;
private boolean started;

/**
 * @param classPathResource
 *            The name of the resource. This resource must be on the test or regular classpath.
 */
public RunWithWebServer(String classPathResource) {
    resource = Resource.newClassPathResource(classPathResource);
}

@Override
protected void before() throws Throwable {
    server = new Server(0);
    ResourceHandler handler = new ResourceHandler();
    handler.setBaseResource(resource);
    server.setHandler(handler);
    server.start();
    this.port = server.getConnectors()[0].getLocalPort();
    this.demoSite = new URL("http", "localhost", port, "/");
    this.started = true;
}

@Override
protected void after() {
    try {
        if (server != null) {
            server.stop();
        }
    } catch (Exception e) {
        throw new RuntimeException("Could not stop the server", e);
    }
}

// Some getters for the fields
</code></pre>

<p>}
```</p>

<p>The class starts the Jetty server using the given resource as the web folder. Tests can then use this rule to obtain a real URL to test with:</p>

<p>```java Using the webserver. <a href="https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/core/CandidateElementExtractorTest.java">https://github.com/crawljax/crawljax/blob/4b3a3f44c946b32c1dee5fa14960764c90393666/src/test/java/com/crawljax/core/CandidateElementExtractorTest.java</a> Usage example
public void SomeWebTest {</p>

<pre><code>@ClassRule
public static final RunWithWebServer SERVER = new RunWithWebServer("/site/crawler");

@Test
public void test() {
    URL url = SERVER.getSiteUrl();
    testStuffUsingThe(url); 
}
</code></pre>

<p>}
```</p>

<p>There are more built-in rules in JUnit like:</p>

<ul>
<li>The <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/TemporaryFolder.html">TemporaryFolder</a> That creates a temporary folder for you,</li>
<li>the <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/rules/Verifier.html">Verifier</a> that can verify some invariant after each test method,</li>
<li>and more! Checkout the <a href="https://github.com/KentBeck/junit/wiki/Rules">JUnit wiki</a> to learn more of them.</li>
</ul>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration testing with Jetty]]></title>
    <link href="http://alex.nederlof.com/blog/2012/11/21/integration-testing-with-jetty/"/>
    <updated>2012-11-21T16:23:00+08:00</updated>
    <id>http://alex.nederlof.com/blog/2012/11/21/integration-testing-with-jetty</id>
    <content type="html"><![CDATA[<p>This is a followup after <a href="/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests/">my previous post about separating JUnit tests into fast tests and integration tests</a>. The sample code is <a href="https://github.com/alexnederlof/integration-testing-example">available on GitHub</a>.</p>

<p>When building a web application I like to have an integration test suite that resembles the real life situation as best as possible. The code should be able to run without too much effort from a build server like <a href="http://jenkins-ci.org/">Jenkins</a> and it should be fairly easy to maintain. In this post I will explain how I achieved these goals.</p>

<p>To see what this example app does run the server by running the main method in <code>com.alexnederlof.inttesting.MyWebServer.java</code> and brows to <a href="">http://localhost:9090</a>. You can do this from your favorite IDE.</p>

<!--more-->


<h3>Installing Selenium server</h3>

<p>Before we get started we need to install Selenium as a service on the build server. <a href="/blog/2012/11/19/installing-selenium-with-jenkins-on-ubuntu/">In a previous post I wrote</a> how to install Selenium on a headless Ubuntu server. To install Selenium for this example, follow that post until the part where you hook it onto Jenkins. We don’t need that here because we will use JUnit instead of the HTML scripts I used in that post. To start and stop Selenium we need a script to wrap the jar. You can find my version of this script <a href="https://gist.github.com/4120566">here</a>. Adopt the script to your settings and install it in <code>/etc/init.d/selenium</code>. Make sure the display port matches the one you defined in <code>/etc/init.d/xvfb</code>. Now start Selenium and check the log to see if it went without any errors.</p>

<h3>Creating the tests</h3>

<p>I created the tests for this example using the Firefox Selenium IDE. I exported them to Java and imported them in my project. They test two very simple pages included in the sample project that refer to each other. Here’s what the test looks like:</p>

<p>```java A simple web test <a href="https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/SimpleSeleniumTest.java">https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/SimpleSeleniumTest.java</a> View on Github</p>

<pre><code>@Test
public void testTheWebApp() throws Exception {
    Selenium selenium = getSelenium();
    selenium.open("/");
    assertThat(selenium.getText("css=h1"), is("This is the main page"));
    assertThat(selenium.getTitle(), is("Welcome"));
    selenium.click("id=otherLink");
    selenium.waitForPageToLoad("30000");
    assertThat(selenium.getTitle(), is("Other page"));
    assertThat(selenium.getText("css=h1"), is("This is the other page"));
    selenium.click("id=main");
    selenium.waitForPageToLoad("30000");
    assertThat(selenium.getTitle(), is("Welcome"));
}
</code></pre>

<p>```</p>

<p>I want my tests to run on multiple browsers. To do this I use one of JUnit’s latest cool features: <a href="http://junit.sourceforge.net/javadoc/org/junit/runners/Parameterized.html">@Parameterized</a>. In the superclass of all my Selenium tests (<code>MultiBrowserTest.java</code>) the @Parameterized passes the browser as an argument to the constructor. Selenium is then started using that browser. The name parameter gives a nice name to the individual tests instances. Here’s what the test’s superclass looks like:</p>

<p>```java MultiBrowserTest <a href="https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/MultiBrowserTest.java">https://github.com/alexnederlof/integration-testing-example/blob/master/src/test/java/com/alexnederlof/inttesting/MultiBrowserTest.java</a> View it on GitHub
public abstract class MultiBrowserTest implements SlowTest {</p>

<pre><code>private static final String BASE_URL = MyWebServer.BASE_URL;
private static final String SELENIUM_HOST = "127.0.0.1";
private static final int SELENIUM_PORT = 4443;

@Parameters(name = "browser={0}")
public static List&lt;Object[]&gt; data() {
    return Arrays.asList(new Object[][] { { "*firefox" },
            { "*googlechrome" } });
}

private final String browser;

private Selenium selenium;

public MultiBrowserTest(String browser) {
    this.browser = browser;
}

@Before
public void setUp() throws Exception {
    selenium = new DefaultSelenium(SELENIUM_HOST, SELENIUM_PORT,
            getBrowser(), BASE_URL);
    selenium.start();
}

public String getBrowser() {
    return browser;
}

public Selenium getSelenium() {
    return selenium;
}

@After
public void tearDown() throws Exception {
    selenium.stop();
}
</code></pre>

<p>}
```</p>

<p>Now we need to setup the server to serve the pages Selenium will test. As shown in <a href="/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests/">the previous post</a>, I have a test suite that starts and stops  <code>MyServer.java</code>. This class wraps Jetty with the most basic configuration. It looks like this:</p>

<p>```java Simple Jetty Wrapper</p>

<pre><code>public static WebAppContext buildWebAppContext() {
    WebAppContext webAppContext = new WebAppContext();
    webAppContext.setWar(new File("src/main/webapp/").getAbsolutePath());
    return webAppContext;
}

private final Server server;

public MyWebServer() {
    this.server = new Server(PORT);
    server.setHandler(buildWebAppContext());
}

public void start() throws Exception {
    server.start();
}

public void stop() throws Exception {
    server.stop();
}
</code></pre>

<p>```</p>

<p>All in all this is what happens when you run <code>mvn test -P integrationtests</code>:</p>

<ul>
<li>The IntegrationTestSuit.java is run. This loads the Jetty server before it continues with the tests.</li>
<li>SimpleSelenium test is loaded twice, once for Chrome and once for FireFox.</li>
<li>The tests connect to the Selenium server running on localhost.</li>
<li>After the tests have ran, either successful or not, the Suite shuts down the Jetty server.</li>
<li>If you run this procedure from a continues integration server like Jenkins, you get nice statistics on tests. Hurray you have automated your integration tests!</li>
</ul>


<p>Even cooler is that if you have a pretty decent Selenium test suite, you can also check your code coverage to see how much code you reach with your integration tests.</p>

<h3>Whats next?</h3>

<p>I want to find out how Selenium Grid works and set it up on a Windows VM so I can also test Safari and Internet Explorer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Separating the fast from the slow JUnit tests]]></title>
    <link href="http://alex.nederlof.com/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests/"/>
    <updated>2012-11-21T16:16:00+08:00</updated>
    <id>http://alex.nederlof.com/blog/2012/11/21/separating-the-fast-from-the-slow-junit-tests</id>
    <content type="html"><![CDATA[<p>For some time now I was looking for a good way to do real integration testing with JUnit. These tests tests tend to be slow because the whole stack has to be build up and shut down. Furthermore, some tests also need a specific environment like a database connection which is not available to any developer. That’s why you probably want to split up your test suite in fast and slow (or dependent) tests. JUnit has a technique to split up these tests using <a href="http://kentbeck.github.com/junit/javadoc/4.10/org/junit/experimental/categories/Categories.html">Categories</a>. This allows you to specify the category your tests belongs to and then skip those tests in your Suite like so:</p>

<p>```java</p>

<pre><code>@RunWith(Categories.class)
@IncludeCategory(SlowTests.class)
@SuiteClasses( { A.class, B.class })
public static class SlowTestSuite { }
</code></pre>

<p>```</p>

<p>The downside here is that you have to specify all the tests in the test suite. As far as I know, JUnit has no mechanism to do this for this for you. You can work with the <a href="http://maven.apache.org/plugins/maven-surefire-plugin/examples/junit.html#Using_JUnit_Categories">Maven Surefire plugin</a> to filter stuff in and out, but I think there’s a better way. A man by the name of <a href="http://www.johanneslink.net/">Johannes Link</a> built a <a href="http://www.johanneslink.net/projects/cpsuite.jsp">great little library</a> which does just what I want. I allows us to specify in a Suite to run all JUnit tests it can find. It can also exclude and include certain tests. Unfortunately  it doesn’t work with JUnit’s Categories system but it uses type inheritance. This makes it easy to filter out types of tests. For example I define all the fast tests like this:</p>

<p><code>java
@RunWith(ClasspathSuite.class) // Loads all unit tests it finds on the classpath
@ExcludeBaseTypeFilter(SlowTest.class) // Excludes tests that inherit SlowTest
public class FastTests {}
</code></p>

<!--more-->


<p>This will run every test that doesn’t implement the SlowTest inferface. The slow test suite needs a tearing up of the server, and once the suite is done the server should be shut down. It could also be that you need to set up a database connection or connect to another server. In my case, the suite should only run subtypes of MultiBrowserTest. Here’s how that looks:</p>

<p>```java
@RunWith(ClasspathSuite.class)
@BaseTypeFilter(MultiBrowserTest.class)
public class IntegrationTestSuite {</p>

<pre><code>private static MyWebServer server;

@BeforeClass
public static void startServer() throws Exception {
    server = new MyWebServer();
    server.start();
}

@AfterClass
public static void shutDownServer() throws Exception {
    server.stop();
}
</code></pre>

<p>}
```</p>

<p>Now that we’ve split up the tests we want Maven to run the fast tests always and do the integration tests only when we ask for it. This can easily be done using Maven profiles. I define two profiles default and integrationtests. They set the include property for the surefire plugin.</p>

<p>``` xml
<profiles></p>

<pre><code>    &lt;profile&gt;
        &lt;id&gt;default&lt;/id&gt;
        &lt;activation&gt;
            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
        &lt;/activation&gt;
        &lt;properties&gt;
            &lt;tests.include&gt;com/alexnederlof/seleniumtest/suites/FastTests.java&lt;/tests.include&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
        &lt;id&gt;integrationtests&lt;/id&gt;
        &lt;properties&gt;
            &lt;tests.include&gt;com/alexnederlof/seleniumtest/suites/*&lt;/tests.include&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;version&gt;2.12.4&lt;/version&gt;
            &lt;configuration&gt;
                &lt;includes&gt;
                    &lt;include&gt;${tests.include}&lt;/include&gt;
                &lt;/includes&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>```</p>

<p>Now running <code>mvn test</code> will run only the FastTests and <code>mvn test -P integrationtests</code> will run all the tests.</p>

<p>You can find the code for this example <a href="https://github.com/alexnederlof/integration-testing-example/">on GitHub</a>. This post is actually part of <a href="/blog/2012/11/21/integration-testing-with-jetty/">another blog post of mine</a> where I explain how to do integration testing using Jetty and Selenium.</p>
]]></content>
  </entry>
  
</feed>
