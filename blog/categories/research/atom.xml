<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Research | LexTech]]></title>
  <link href="http://alex.nederlof.com/blog/categories/research/atom.xml" rel="self"/>
  <link href="http://alex.nederlof.com/"/>
  <updated>2013-12-30T11:25:31+01:00</updated>
  <id>http://alex.nederlof.com/</id>
  <author>
    <name><![CDATA[Alex Nederlof]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The truth about code reviews]]></title>
    <link href="http://alex.nederlof.com/blog/2013/05/24/the-truth-about-code-reviews/"/>
    <updated>2013-05-24T16:31:00+02:00</updated>
    <id>http://alex.nederlof.com/blog/2013/05/24/the-truth-about-code-reviews</id>
    <content type="html"><![CDATA[<p>During the <a href="http://2013.icse-conferences.org/">International Conference of Software Engineering 2013 </a> I visited a great talk by <a href="https://twitter.com/sback_">Alberto Bacchelli</a> on modern code reviews. It resonated with my experience with code reviews and I&rsquo;d like to share the highlights of <a href="http://www.inf.usi.ch/phd/bacchelli/publications/icse2013.pdf">his research</a> conducted among 17 developers from 16 different teams at Microsoft.</p>

<p>Most developers have to do some kind of code reviewing at some point. When you use GitHub for example, every pull request can be seen as a code review. At some companies like Microsoft, Google and Facebook, code reviews are part of the job. To make it easy for developers they work with specialized tools like <a href="https://developers.google.com/appengine/articles/rietveld">Google&rsquo;s Rietveld</a>, <a href="http://phabricator.org/">Facebook&rsquo;s Phabricator</a> or the Open Source tool <a href="https://code.google.com/p/gerrit/">Gerrit</a>. We do code reviews because it is well known that <a href="http://www.youtube.com/watch?v=CKjRt48rZGk">code reviews offer many advantages</a>. When I have to explain to someone why code reviews are important, I come up with the same arguments most developers come up with (in order of importance):</p>

<ol>
<li>finding defects</li>
<li>code quality improvement</li>
<li>alternative Solutions</li>
<li>knowledge Transfer</li>
<li>shared code ownership</li>
</ol>


<p>However, research shows a different result:</p>

<blockquote><p>Although the top motivation driving code reviews is still finding defects, the practice and the actual outcomes are less about finding errors than expected: Defect related comments comprise a small proportion and mainly cover small logical low-level issues</p></blockquote>

<!--more-->


<p>So what does research show us? Here&rsquo;s the overview of what developers indicate is their motivation for code reviews:</p>

<p><img src="/images/code-reviews-motivations.png" width="500" title="&lsquo;Motivations&rsquo; &lsquo;Source: &rsquo;" ></p>

<p>By observing developers doing code reviews, Bacchelli has found quite a different outcome. In order of preference, the actual use of code reviews turns out to be:</p>

<ol>
<li><strong>Code improvements:</strong> Taking up 29% of the comments are things like better code practices, removing unnecessary code, and improving readability.</li>
<li><strong>Understanding:</strong> Discussions about what the code does take up a little over 20%</li>
<li><strong>Social communication:</strong> Messages such as thanking reviewers for a comment, and informing them that a proposed change has been implemented.</li>
<li><strong>Defects:</strong> In contrast to what developers believe is the most important reason, defect finding comes fourth with 14% of the comments. These include logical issues, high-level issues, security issues and exception handling.</li>
</ol>


<h3>Code Reviewing Is Understanding</h3>

<p>So why is finding defects in fourth place instead of first? The problem is that most of the code in a review is hard to understand if you are not the author. The study reports that most defects found in a review were not complicated errors:</p>

<blockquote><p> …most of the comments on “defects” regard uncomplicated logical errors, e.g., corner cases, common configuration values, or operator precedence.</p></blockquote>

<p>To this extend, the researchers asked the developers and testers what activities require most understanding when giving a code review. The majority votes for a <em>complete</em> or <em>high</em> understanding to find defects or offer alternative solutions. Sharing code ownership and knowledge require <em>low</em> or <em>high</em> understanding of the code. The lesson here is that when you ask for a code review, (1) make sure you ask the right person, and (2) don&rsquo;t assume the reviewer will find any bugs.</p>

<h3>Can we improve the way we review?</h3>

<p>Most of the code reviews I do go via GitHub pull requests. Although they give an excellent textual presentation of the diff, the code is ordered alphabetically and it isn&rsquo;t interactive. As far as I know, the same goes for the other review tools mentioned before. There are a couple of ways this could be improved in my opinion:</p>

<ul>
<li>By showing something like a class/module/file diagram diff. This would make it easier for a developer to see in which modules most changes occurred and how those propagate through the code.</li>
<li>Allow method jumping in a diff. Especially in a large diff you quickly lose the overview of where methods lead to or come from. Being able to jump from the method you&rsquo;re reading to the method that is being called would be a huge improvement in code diff navigation.</li>
<li>As mentioned in the research, it is best the review is performed by another author of the given file. It would be great if the review tool would choose the best reviewer for a given changeset based on the code history.</li>
</ul>


<h3>Conclusions</h3>

<p>Code reviews are still very helpful however we should understand that their are not as useful for finding bugs as we might have thought. The tools we use for reviewing can still be improved. Until they do, make sure you appoint your reviews to the right person.</p>

<p><em>N.B. Copyright notice: All data and graphs used in this post are from the <a href="http://www.inf.usi.ch/phd/bacchelli/publications/icse2013.pdf">original paper</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX build server]]></title>
    <link href="http://alex.nederlof.com/blog/2013/02/22/latex-build-server/"/>
    <updated>2013-02-22T10:58:00+01:00</updated>
    <id>http://alex.nederlof.com/blog/2013/02/22/latex-build-server</id>
    <content type="html"><![CDATA[<p>I recently had to work with <a href="http://www.LaTeX-project.org/">LaTeX</a> again. Although LaTeX has its perks like a proper equation editor and BibTex I don&rsquo;t like working with it for several reasons:</p>

<ol>
<li>there is no proper <a href="http://en.wikipedia.org/wiki/WYSIWYG">WYSIWYG</a> editor that compiles while you type for OS X and the source files are hard to read by themselves</li>
<li>you have to manually configure that it compiles LaTeX, then bibtex, and then LaTeX twice</li>
<li>the horrors of positioning and loading images with all the different compilers, bounding boxes, etc.</li>
<li>the fact that they have their own <a href="http://tex.stackexchange.com/">Stack exchange Q&amp;A</a> is an indication of how arcane it is.</li>
</ol>


<p>Because the source files are so unpleasant to read, you always have to make sure you send the compiled latest version of your document to the right people. What I like about some MarkDown related projects like <a href="https://github.com/mojombo/jekyll">Jekyll</a> and <a href="octopress.org">Octopress</a> is the way you can push the source to for example GitHub, and they build the site for you. I wanted that for LaTeX as well. Using a simple script I now have my own LaTeX build server. This way my colleagues and I can always see the latest version of the document in any browser so I don&rsquo;t have to think about distributing the latest version to the right people or devices.</p>

<p>The end result is nice and simple listing of the PDF, diff and log in a folder that indicates the build date:</p>

<p><img class="[End result]" src="/images/latex-build.png" title="End result" ></p>

<!--more-->


<h3>Setting it up</h3>

<p>I host my own Git server so I hooked the script as a <code>post-receive</code> script in the Git hooks directory. If you are running elsewhere you could also do it via a WebHook I guess. You need a workspace folder to checkout the project and a web folder to dump the results in. Here is the script:</p>

<p><div><script src='https://gist.github.com/5015614.js'></script>
<noscript><pre><code>#!/bin/sh

WEBDIR=yourwebdir
WORKSPACE=your/workspace
TEX_FILE_NAME=your_file

echo
echo &quot;**** Pulling changes into Live [Hub&#39;s post-update hook]&quot;
echo

# Go to the checked-out version of repo
cd $WORKSPACE || exit
unset GIT_DIR

# Save the current commit id so we can calculate the diff
current=`git rev-parse HEAD`

# Update the latest changes in master
git pull origin master

# Compile the LaTex stuff
pdflatex -interaction=batchmode $TEX_FILE_NAME.tex &gt; /dev/null
bibtex -terse $TEX_FILE_NAME
pdflatex -interaction=batchmode $TEX_FILE_NAME.tex &gt; /dev/null
pdflatex -interaction=batchmode $TEX_FILE_NAME.tex

# Create a folder for the new build
NOW=$(date +&quot;%m-%d-%Y-%H%M&quot;)
OUT_DIR=$WEBDIR/$NOW
mkdir $OUT_DIR 

# Move the results to the output directory
cp $TEX_FILE_NAME.pdf $OUT_DIR/$TEX_FILE_NAME-$NOW-.pdf

# Make a syntax highlighted diff in the output directory
git diff $current..HEAD | pygmentize -l diff -f html -O full &gt; $OUT_DIR/diff.html

# Output the log messages to the output directory
git log $current..HEAD &gt; $OUT_DIR/log.txt

# And we&#39;re all done
exec git update-server-info
</code></pre></noscript></div>
</p>

<p>I use <a href="http://pygments.org/">Pygments</a> to format the diff file and <code>pdflatex</code> to parse the LaTeX. Make sure you have these packages installed on you system.</p>

<p>I&rsquo;m running Apache which gives a nice directory listing. However, it sorts the files in the wrong order. I want the most recent to be on top. Luckily this can be configured in Apache using the <code>IndexOrderDefault Descending Date</code> in your configuration.</p>

<h3>Potential improvements:</h3>

<ul>
<li>I use a static location for the work folder but you could also create a temporary folder and delete it afterwards.</li>
<li>This script only builds the master branch, you could also create a per-branch output folder system.</li>
<li>Adding <a href="http://kernel.org/pub/software/scm/git/docs/git-describe.html">git-discribe</a> to the output would be nice.</li>
</ul>

]]></content>
  </entry>
  
</feed>
